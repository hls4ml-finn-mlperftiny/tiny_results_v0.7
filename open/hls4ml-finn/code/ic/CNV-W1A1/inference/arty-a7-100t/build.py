import finn.builder.build_dataflow as build
import finn.builder.build_dataflow_config as build_cfg
from finn.transformation.fpgadataflow.insert_tlastmarker import InsertTLastMarker
from finn.transformation.fpgadataflow.prepare_ip import PrepareIP
from finn.transformation.fpgadataflow.hlssynth_ip import HLSSynthIP
from finn.transformation.fpgadataflow.replace_verilog_relpaths import ReplaceVerilogRelPaths
from finn.transformation.general import GiveUniqueNodeNames
from finn.util.basic import alveo_default_platform
import os
import shutil


# the BNN-PYNQ models -- these all come as exported .onnx models
# see models/download_bnn_pynq_models.sh
models = [
    "cnv-w1a1"
]

# which platforms to build the networks for
zynq_platforms = ["Arty-A7"]
alveo_platforms = []
platforms_to_build = zynq_platforms + alveo_platforms

### AXI-DMA
# NOTE: THE ARTY BUILD ONLY WORKS WITH THE AXIDMA DATAMOVER!
datamover = "axidma"

### HLS-MOVER
#datamover = "hlsmover"

# determine which shell flow to use for a given platform
def platform_to_shell(platform):
    if platform == "Arty-A7":
        return build_cfg.ShellFlowType.VIVADO_ZYNQ
    elif platform in zynq_platforms:
        return build_cfg.ShellFlowType.VIVADO_ZYNQ
    elif platform in alveo_platforms:
        return build_cfg.ShellFlowType.VITIS_ALVEO
    else:
        raise Exception("Unknown platform, can't determine ShellFlowType")

### AXI-DMA
## define custom step for TLastMarker insertion
def step_insert_tlastmarker(model, cfg):
    # if dynamic=True below, will need to specify number of images
    # after which TLAST will be generated by writing to an AXI lite CSR
    # if dynamic=False, always generate TLAST after each image
    model = model.transform(InsertTLastMarker(dynamic=False))
    model = model.transform(GiveUniqueNodeNames())
    model = model.transform(PrepareIP(cfg._resolve_fpga_part(), cfg._resolve_hls_clk_period()))
    model = model.transform(HLSSynthIP())
    model = model.transform(ReplaceVerilogRelPaths())
    return model

# create a release dir, used for finn-examples release packaging
os.makedirs("release", exist_ok=True)

### AXI-DMA
## add a custom step after step_set_fifo_depths for TLastMarker insertion
custom_steps = build_cfg.default_build_dataflow_steps
custom_step_ind = custom_steps.index("step_set_fifo_depths") + 1
custom_steps.insert(custom_step_ind, step_insert_tlastmarker)


for platform_name in platforms_to_build:
    shell_flow_type = platform_to_shell(platform_name)
    if shell_flow_type == build_cfg.ShellFlowType.VITIS_ALVEO:
        vitis_platform = alveo_default_platform[platform_name]
        # for Alveo, use the Vitis platform name as the release name
        # e.g. xilinx_u250_xdma_201830_2
        release_platform_name = vitis_platform
    else:
        vitis_platform = None
        # for Zynq, use the board name as the release name
        # e.g. ZCU104
        release_platform_name = platform_name
    platform_dir = "release/%s" % release_platform_name
    os.makedirs(platform_dir, exist_ok=True)
    for model_name in models:
        # set up the build configuration for this model
        cfg = build_cfg.DataflowBuildConfig(
            ### AXI-DMA
            #steps=custom_steps,
            output_dir="output_%s_%s_%s" % (datamover, model_name, release_platform_name),
            #output_dir="output_%s_%s" % (model_name, release_platform_name),
            folding_config_file="folding_config/%s_folding_config.json" % model_name,
            synth_clk_period_ns=10.0,
            shell_flow_type=shell_flow_type,
            vitis_platform=vitis_platform,
            ### AXI-DMA
            generate_outputs=[build_cfg.DataflowOutputType.STITCHED_IP],
            ### HLS-MOVER
            #generate_outputs=[build_cfg.DataflowOutputType.BITFILE],
            save_intermediate_models=True,
            steps=custom_steps,
            fpga_part="xc7z020clg400-1",
            stitched_ip_gen_dcp=True,
            verify_save_full_context=True,
        )
        model_file = "models/%s.onnx" % model_name
        # launch FINN compiler to build
        build.build_dataflow_cfg(model_file, cfg)
